#!/usr/bin/env coffee

async = require 'async'

argv = (require 'minimist') process.argv.slice 2

if argv.help
  printHelp()
  process.exit 1

AWS = require './aws'
EC2 = new AWS.EC2()

LIFETIME_HARD_LIMIT = 2 * 60 * 60 * 1000 # 2 hours

run = ->
  unless argv.hours or argv.minutes
    console.error "error: Please specify an expiration time\n"
    printHelp()
    process.exit 1

  {DryRun, ExpirationTime} = getOptions argv

  Filters = [
    { Name: 'instance-state-name', Values: ['running'] }
    { Name: 'tag:Role', Values: ['test-instance'] }
  ]

  EC2.describeInstances {Filters}, (err, data) ->

    return error err  if err

    unless data or data.Reservations
      return error 'Reservations not found'

    instances = []

    data.Reservations.forEach ({Instances}) ->
      return  unless Instances

      Instances.forEach (instance) ->
        {InstanceId, LaunchTime, State} = instance

        return  if State.Name is 'terminated'
        return  if ExpirationTime <= LaunchTime

        instances.push instance

    return process.exit 0  unless instances.length

    async.filter instances, checkApiTermination, (Instances) ->
      return process.exit 0  unless Instances.length

      InstanceIds = Instances.map (instance) -> instance.InstanceId

      EC2.terminateInstances {DryRun, InstanceIds}, (err) ->
        return error err  if err


getOptions = (argv) ->
  DryRun = argv['dry-run']
  ExpirationTime = getExpirationTime argv

  return {DryRun, ExpirationTime}


getExpirationTime = (argv) ->
  {hours, minutes} = argv

  hours   ?= 0
  minutes ?= 0 + (hours * 60)

  return new Date Date.now() - (minutes * 60 * 1000)


checkApiTermination = (instance, callback) ->
  {InstanceId} = instance

  Attribute = 'disableApiTermination'

  params = {InstanceId, Attribute}

  EC2.describeInstanceAttribute params, (err, data) ->
    return callback no  if err or not data

    return callback yes  if not data.DisableApiTermination.Value

    lifetime = Date.now() - instance.LaunchTime
    return callback no  if lifetime < LIFETIME_HARD_LIMIT

    disableApiTermination instance, (err) ->
      if err
        error err
        callback no
      else
        callback yes


disableApiTermination = (instance, callback) ->

  {InstanceId} = instance

  Attribute = 'disableApiTermination'
  Value = 'false'

  params = {InstanceId, Attribute, Value}

  EC2.modifyInstanceAttribute params, callback


error = (err) ->
  console.error "error: #{JSON.stringify err}"  if err


printHelp = ->
  console.log """
Invalid options are given. Please specify only options described
below.

--dry-run   Specify this option to test run
--hours     How many hours to set expiration time
--minutes   How many minutes to set expiration time

Hours and minutes options are combined.

Example usage:

  ./terminate-leftover-test-instances --hours 1 --minutes 15

This command will terminate test instances older than an hour and 15
minutes.
"""

run()
