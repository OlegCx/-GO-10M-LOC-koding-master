// Code generated by go-bindata.
// sources:
// app.yaml
// DO NOT EDIT!

package mixin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4f\x6f\xd4\x3e\x10\xbd\xef\xa7\x98\xdf\xfe\x50\x7b\x72\xc3\xa5\x42\x8a\xc4\x19\x21\x0e\x54\x15\x47\xa4\x68\xe2\xcc\x6e\x86\x38\xb6\x35\xb6\x37\xda\x02\xdf\x1d\xd9\x49\xca\x16\x16\x14\x2e\x89\xfd\xfc\xde\xbc\xf9\x37\xa2\xee\xd9\x52\xbd\x03\x18\x5c\xc7\xf6\xd8\xa0\x99\xf0\x1c\x1a\x67\x6b\x88\x92\xe8\xe7\xc3\xe8\x92\x8d\x21\x33\x01\x3a\x3a\x60\x32\xb1\x86\x7d\x75\x42\xa9\x0c\xb7\xd5\xcc\xaa\xd0\xfb\xfd\x4e\x1b\x97\x3a\xb6\x1c\x33\x3b\x05\x92\x22\x53\x60\x71\xa4\x1a\xf6\xaf\xbe\x9e\x50\xee\x56\x3f\xad\x73\xe0\xc6\x8b\x3b\xb0\xa1\xc6\xb2\x1e\x32\xef\xfb\xbe\x38\x85\xd0\x37\x98\x62\xef\x84\x9f\xa8\x6b\x06\x3a\x2f\x29\xa8\x35\x4e\x8e\xff\xde\xfa\x14\x1b\x9f\x5a\xc3\xfa\x03\x9d\x8b\x76\x12\x8e\xd4\xe4\x98\x8b\xbb\xc7\xd8\x5f\xc9\x58\x92\x9d\xad\x3c\xc9\xc8\x21\xb0\xb3\xa1\x86\xd7\x6f\xee\xef\x0b\xea\x26\x4b\xb2\x39\xe9\xfa\x5f\x6a\xd3\xce\x46\xb2\xb1\x86\x6f\xaa\xdc\x01\xfe\xff\xaf\x6a\xd9\x56\x2d\x86\x7e\x41\x02\x45\x50\x94\x1c\x78\xf6\x74\x40\x36\x0b\xde\x39\x3d\x90\x80\x24\x5b\xae\x9f\x17\x18\x40\x29\x19\xd7\xf3\x0b\x38\x1b\x03\x7a\xff\x12\xf6\xf0\x6b\x17\x27\x6a\x1f\x9c\xc4\xb5\x94\xdf\x1f\x2e\xe5\x04\x0f\x1f\x1f\x3f\xbd\xdd\x42\x3d\xc1\x95\x5d\xa9\xf3\xe7\x82\x25\x5f\x48\x3f\xa1\xe1\xa1\x6a\x13\x9b\x2e\x44\xf2\xb5\xc1\x48\x21\x5e\x66\xfd\xdc\x24\x50\x1a\x6e\x67\xea\xfc\x25\x81\x9b\x1b\xa8\x42\x44\x89\x30\x51\x7b\xbb\x03\xf0\xa8\x07\x3c\x52\x93\x7c\x87\x91\x9e\xd7\x7a\x81\x97\xe5\x98\xfb\x79\x71\xbc\x63\x57\x6e\x47\x8e\xeb\x5f\x69\x27\x59\x29\xc9\xea\xb1\x9b\x75\xb9\xe6\xd1\x75\xa0\x10\xd4\xbb\x75\x2a\xdb\x96\xa0\xe8\xc7\xa1\x63\xc9\x63\xb8\xd2\x9c\x42\xd0\xbd\x9b\x2c\xa8\xc7\x8d\x41\x37\x2e\x60\x69\xe5\x9f\x2c\x97\x2a\x7c\x32\xe6\x2f\x03\xd9\xfd\x08\x00\x00\xff\xff\x63\x01\x0e\x39\x3c\x04\x00\x00")

func appYamlBytes() ([]byte, error) {
	return bindataRead(
		_appYaml,
		"app.yaml",
	)
}

func appYaml() (*asset, error) {
	bytes, err := appYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.yaml", size: 1084, mode: os.FileMode(420), modTime: time.Unix(1475345133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app.yaml": appYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app.yaml": &bintree{appYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

