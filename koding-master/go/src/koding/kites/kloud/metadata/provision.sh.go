// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xfd\x25\xe5\xb7\x96\x4d\x76\x12\x18\x85\x8d\x05\x46\x17\x46\x69\x97\x41\xda\x3e\x6d\x23\x28\xf2\x75\xac\x45\xd6\x15\x57\xb2\xfb\x8f\x7c\xf7\xe1\xa4\x71\xb7\xa6\xa5\x7e\xbb\xd6\x39\xe7\x1e\x1d\x9d\xfe\x7f\xd9\xc2\xb8\x6c\xa1\x42\x29\x44\x1f\xce\x28\x37\x6e\x09\x9e\x42\x94\x9e\xa9\x31\xc1\x90\x83\xa0\xd9\xf8\x08\x8c\xc1\x93\x0b\x66\x61\x11\x0a\x62\xc8\xd1\x5b\xba\x6d\xf1\x0a\x56\xd6\xa0\x8b\x10\x90\x1b\xa3\x31\x15\x7d\xd1\x87\x13\xf2\xb7\x6c\x96\x65\x84\xc3\x93\x23\x18\x0d\x86\x23\x39\x1a\x0c\x8f\x77\x4b\x4e\x9d\x4e\xdf\x81\xb2\x16\x36\xa0\xd0\xea\x23\x37\x98\xa7\x42\x04\x8c\x20\xb1\x26\xf0\xc6\x63\xa1\x8c\x6d\xcd\x5d\x96\xed\x5e\x6b\xe9\xba\xa5\x37\x8a\x8d\x5a\x58\x0c\xa0\x18\xc1\xab\x10\x30\x87\xc6\x28\x88\xc8\xac\x0a\xe2\xea\x4d\xe8\x40\xb0\xb0\xa4\x57\xa9\xc0\x1b\x4f\x1c\xe1\xec\xfb\x97\xd3\xe9\xd7\xf9\xd5\xc5\x64\x36\xfd\xfc\x6d\xf2\xa9\x77\x70\x70\xff\xe4\xdf\x07\x79\x70\xdf\x28\x4e\x57\x1b\xb3\x73\xa5\x35\xd5\x2e\xce\x3d\x53\x61\x2c\xce\x9d\xd1\x2b\xa7\x2a\x5c\xaf\x7b\x9d\xe8\xf9\xe9\x64\x7a\x39\xbf\x9a\x9d\x6f\xf5\xba\xf1\x89\xd4\x36\xaa\x79\xcd\xf6\x2f\xf2\xc5\xc9\x6c\x32\x99\x76\xe4\xc7\xf1\x09\x39\x68\x46\x74\x3b\xb2\xa8\x94\x71\x87\x47\x70\x2f\x12\xd4\x25\x41\x6f\x38\x3a\x4e\x07\xe9\x20\x1d\xc2\xfe\x8d\xd6\x3d\x18\x8f\x21\xc3\xa8\xb3\x92\x42\x0c\x42\x24\x91\x6a\x5d\x42\xd6\x28\xce\x2c\x2d\xb3\xad\xb3\xd4\xd2\x12\x7e\x8a\x04\x36\x5f\x77\xa8\x2d\xd5\xb9\x34\xce\x44\x49\x75\xf4\xf5\x06\x27\x44\x52\xad\x72\xc3\x20\x3d\x64\xe4\x63\xb6\x32\x11\x1f\x74\x44\xa2\x6b\xb6\x20\xa5\x25\xad\x62\xdb\x23\x29\x83\xb1\x6d\x4d\xa4\x0c\x25\x5d\x4b\x64\x26\x06\x29\x19\x23\xdf\xc2\x7b\xf8\x37\xb6\x75\x0f\xe4\xc3\x2a\xc8\x62\xe5\x77\xf6\x96\x77\x22\x59\xde\x19\x0f\x52\xe6\xa8\xa9\xf2\x8c\x21\x80\x94\x05\xb1\xc6\x56\x3a\xe6\xb4\x47\x81\xf1\x9e\xbf\x47\x9b\x65\x45\x39\xbc\xbd\x79\x11\xd1\x42\xe8\xda\x81\x9c\xc1\x33\x4d\x59\xf7\xda\xb4\x92\x8e\xbc\x9d\x9e\xcf\x34\x79\x35\xce\x17\x3c\x80\xac\x30\xaa\x5c\x45\x25\xeb\x80\xfc\x82\x8f\x47\x50\x5b\xd2\x87\xb7\x33\x8b\x6c\x5b\x9e\x6c\x77\x9a\xfe\x0e\xe4\x80\x6b\x27\x44\x62\x0a\xf8\x01\xf2\x66\x0f\xdb\x6e\x91\x1b\x70\x28\xe1\xd7\x47\x88\x25\xba\xce\xff\xf3\x30\x91\x14\x46\xac\xb7\xa5\x84\xff\xc7\xe3\x57\xee\xfa\x27\x00\x00\xff\xff\xe8\x0b\xc2\x38\x7b\x04\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 1147, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
