package j_compute_stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j compute stack API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j compute stack API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JComputeStackCheckRevision j compute stack check revision API
*/
func (a *Client) JComputeStackCheckRevision(params *JComputeStackCheckRevisionParams, authInfo runtime.ClientAuthInfoWriter) (*JComputeStackCheckRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJComputeStackCheckRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JComputeStack.checkRevision",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.checkRevision/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JComputeStackCheckRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JComputeStackCheckRevisionOK), nil

}

/*
JComputeStackCreate JComputeStack::create
*/
func (a *Client) JComputeStackCreate(params *JComputeStackCreateParams, authInfo runtime.ClientAuthInfoWriter) (*JComputeStackCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJComputeStackCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JComputeStack.create",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JComputeStackCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JComputeStackCreateOK), nil

}

/*
JComputeStackCreateAdminMessage Method JComputeStack.createAdminMessage
*/
func (a *Client) JComputeStackCreateAdminMessage(params *JComputeStackCreateAdminMessageParams, authInfo runtime.ClientAuthInfoWriter) (*JComputeStackCreateAdminMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJComputeStackCreateAdminMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JComputeStack.createAdminMessage",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.createAdminMessage/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JComputeStackCreateAdminMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JComputeStackCreateAdminMessageOK), nil

}

/*
JComputeStackDelete Method JComputeStack.delete
*/
func (a *Client) JComputeStackDelete(params *JComputeStackDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*JComputeStackDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJComputeStackDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JComputeStack.delete",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.delete/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JComputeStackDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JComputeStackDeleteOK), nil

}

/*
JComputeStackDeleteAdminMessage Method JComputeStack.deleteAdminMessage
*/
func (a *Client) JComputeStackDeleteAdminMessage(params *JComputeStackDeleteAdminMessageParams, authInfo runtime.ClientAuthInfoWriter) (*JComputeStackDeleteAdminMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJComputeStackDeleteAdminMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JComputeStack.deleteAdminMessage",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.deleteAdminMessage/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JComputeStackDeleteAdminMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JComputeStackDeleteAdminMessageOK), nil

}

/*
JComputeStackDestroy Method JComputeStack.destroy
*/
func (a *Client) JComputeStackDestroy(params *JComputeStackDestroyParams, authInfo runtime.ClientAuthInfoWriter) (*JComputeStackDestroyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJComputeStackDestroyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JComputeStack.destroy",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.destroy/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JComputeStackDestroyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JComputeStackDestroyOK), nil

}

/*
JComputeStackMaintenance j compute stack maintenance API
*/
func (a *Client) JComputeStackMaintenance(params *JComputeStackMaintenanceParams, authInfo runtime.ClientAuthInfoWriter) (*JComputeStackMaintenanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJComputeStackMaintenanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JComputeStack.maintenance",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.maintenance/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JComputeStackMaintenanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JComputeStackMaintenanceOK), nil

}

/*
JComputeStackModify j compute stack modify API
*/
func (a *Client) JComputeStackModify(params *JComputeStackModifyParams, authInfo runtime.ClientAuthInfoWriter) (*JComputeStackModifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJComputeStackModifyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JComputeStack.modify",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.modify/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JComputeStackModifyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JComputeStackModifyOK), nil

}

/*
JComputeStackOne j compute stack one API
*/
func (a *Client) JComputeStackOne(params *JComputeStackOneParams, authInfo runtime.ClientAuthInfoWriter) (*JComputeStackOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJComputeStackOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JComputeStack.one",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JComputeStackOneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JComputeStackOneOK), nil

}

/*
JComputeStackSome j compute stack some API
*/
func (a *Client) JComputeStackSome(params *JComputeStackSomeParams, authInfo runtime.ClientAuthInfoWriter) (*JComputeStackSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJComputeStackSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JComputeStack.some",
		Method:             "POST",
		PathPattern:        "/remote.api/JComputeStack.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JComputeStackSomeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JComputeStackSomeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
