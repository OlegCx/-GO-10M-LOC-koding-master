package j_stack_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j stack template API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j stack template API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JStackTemplateBuild j stack template build API
*/
func (a *Client) JStackTemplateBuild(params *JStackTemplateBuildParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.build",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.build/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateBuildOK), nil

}

/*
JStackTemplateClone j stack template clone API
*/
func (a *Client) JStackTemplateClone(params *JStackTemplateCloneParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateCloneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateCloneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.clone",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.clone/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateCloneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateCloneOK), nil

}

/*
JStackTemplateCreate creates a JStackTemplate with requested content
*/
func (a *Client) JStackTemplateCreate(params *JStackTemplateCreateParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.create",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateCreateOK), nil

}

/*
JStackTemplateDelete j stack template delete API
*/
func (a *Client) JStackTemplateDelete(params *JStackTemplateDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.delete",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.delete/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateDeleteOK), nil

}

/*
JStackTemplateForceStacksToReinit j stack template force stacks to reinit API
*/
func (a *Client) JStackTemplateForceStacksToReinit(params *JStackTemplateForceStacksToReinitParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateForceStacksToReinitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateForceStacksToReinitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.forceStacksToReinit",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.forceStacksToReinit/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateForceStacksToReinitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateForceStacksToReinitOK), nil

}

/*
JStackTemplateGenerateStack j stack template generate stack API
*/
func (a *Client) JStackTemplateGenerateStack(params *JStackTemplateGenerateStackParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateGenerateStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateGenerateStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.generateStack",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.generateStack/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateGenerateStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateGenerateStackOK), nil

}

/*
JStackTemplateHasStacks j stack template has stacks API
*/
func (a *Client) JStackTemplateHasStacks(params *JStackTemplateHasStacksParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateHasStacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateHasStacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.hasStacks",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.hasStacks/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateHasStacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateHasStacksOK), nil

}

/*
JStackTemplateOne j stack template one API
*/
func (a *Client) JStackTemplateOne(params *JStackTemplateOneParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.one",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateOneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateOneOK), nil

}

/*
JStackTemplateSamples returns sample stack template for given provider
*/
func (a *Client) JStackTemplateSamples(params *JStackTemplateSamplesParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateSamplesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateSamplesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.samples",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.samples",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateSamplesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateSamplesOK), nil

}

/*
JStackTemplateSetAccess j stack template set access API
*/
func (a *Client) JStackTemplateSetAccess(params *JStackTemplateSetAccessParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateSetAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateSetAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.setAccess",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.setAccess/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateSetAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateSetAccessOK), nil

}

/*
JStackTemplateSome j stack template some API
*/
func (a *Client) JStackTemplateSome(params *JStackTemplateSomeParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.some",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateSomeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateSomeOK), nil

}

/*
JStackTemplateUpdate j stack template update API
*/
func (a *Client) JStackTemplateUpdate(params *JStackTemplateUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.update",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.update/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateUpdateOK), nil

}

/*
JStackTemplateVerify Method JStackTemplate.verify
*/
func (a *Client) JStackTemplateVerify(params *JStackTemplateVerifyParams, authInfo runtime.ClientAuthInfoWriter) (*JStackTemplateVerifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJStackTemplateVerifyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JStackTemplate.verify",
		Method:             "POST",
		PathPattern:        "/remote.api/JStackTemplate.verify/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JStackTemplateVerifyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JStackTemplateVerifyOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
