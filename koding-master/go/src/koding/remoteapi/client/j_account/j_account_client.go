package j_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JAccountAcceptInvitation j account accept invitation API
*/
func (a *Client) JAccountAcceptInvitation(params *JAccountAcceptInvitationParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountAcceptInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountAcceptInvitationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.acceptInvitation",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.acceptInvitation/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountAcceptInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountAcceptInvitationOK), nil

}

/*
JAccountBlockUser j account block user API
*/
func (a *Client) JAccountBlockUser(params *JAccountBlockUserParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountBlockUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountBlockUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.blockUser",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.blockUser/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountBlockUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountBlockUserOK), nil

}

/*
JAccountByRelevance j account by relevance API
*/
func (a *Client) JAccountByRelevance(params *JAccountByRelevanceParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountByRelevanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountByRelevanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.byRelevance",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.byRelevance",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountByRelevanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountByRelevanceOK), nil

}

/*
JAccountCancelRequest j account cancel request API
*/
func (a *Client) JAccountCancelRequest(params *JAccountCancelRequestParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountCancelRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountCancelRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.cancelRequest",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.cancelRequest/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountCancelRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountCancelRequestOK), nil

}

/*
JAccountCheckGroupMembership j account check group membership API
*/
func (a *Client) JAccountCheckGroupMembership(params *JAccountCheckGroupMembershipParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountCheckGroupMembershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountCheckGroupMembershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.checkGroupMembership",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.checkGroupMembership/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountCheckGroupMembershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountCheckGroupMembershipOK), nil

}

/*
JAccountCount j account count API
*/
func (a *Client) JAccountCount(params *JAccountCountParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.count",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.count",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountCountOK), nil

}

/*
JAccountDestroy Method JAccount.destroy
*/
func (a *Client) JAccountDestroy(params *JAccountDestroyParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountDestroyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountDestroyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.destroy",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.destroy/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountDestroyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountDestroyOK), nil

}

/*
JAccountExpireSubscription j account expire subscription API
*/
func (a *Client) JAccountExpireSubscription(params *JAccountExpireSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountExpireSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountExpireSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.expireSubscription",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.expireSubscription/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountExpireSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountExpireSubscriptionOK), nil

}

/*
JAccountFetchAppStorage j account fetch app storage API
*/
func (a *Client) JAccountFetchAppStorage(params *JAccountFetchAppStorageParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchAppStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchAppStorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchAppStorage",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchAppStorage/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchAppStorageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchAppStorageOK), nil

}

/*
JAccountFetchBlockedUsers j account fetch blocked users API
*/
func (a *Client) JAccountFetchBlockedUsers(params *JAccountFetchBlockedUsersParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchBlockedUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchBlockedUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchBlockedUsers",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchBlockedUsers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchBlockedUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchBlockedUsersOK), nil

}

/*
JAccountFetchEmail Method JAccount.fetchEmail
*/
func (a *Client) JAccountFetchEmail(params *JAccountFetchEmailParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchEmail",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchEmail/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchEmailOK), nil

}

/*
JAccountFetchEmailAndStatus j account fetch email and status API
*/
func (a *Client) JAccountFetchEmailAndStatus(params *JAccountFetchEmailAndStatusParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchEmailAndStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchEmailAndStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchEmailAndStatus",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchEmailAndStatus/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchEmailAndStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchEmailAndStatusOK), nil

}

/*
JAccountFetchEmailFrequency j account fetch email frequency API
*/
func (a *Client) JAccountFetchEmailFrequency(params *JAccountFetchEmailFrequencyParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchEmailFrequencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchEmailFrequencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchEmailFrequency",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchEmailFrequency/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchEmailFrequencyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchEmailFrequencyOK), nil

}

/*
JAccountFetchEmailsByUsername j account fetch emails by username API
*/
func (a *Client) JAccountFetchEmailsByUsername(params *JAccountFetchEmailsByUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchEmailsByUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchEmailsByUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchEmailsByUsername",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchEmailsByUsername",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchEmailsByUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchEmailsByUsernameOK), nil

}

/*
JAccountFetchFromUser j account fetch from user API
*/
func (a *Client) JAccountFetchFromUser(params *JAccountFetchFromUserParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchFromUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchFromUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchFromUser",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchFromUser/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchFromUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchFromUserOK), nil

}

/*
JAccountFetchGroups j account fetch groups API
*/
func (a *Client) JAccountFetchGroups(params *JAccountFetchGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchGroups",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchGroups/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchGroupsOK), nil

}

/*
JAccountFetchKites j account fetch kites API
*/
func (a *Client) JAccountFetchKites(params *JAccountFetchKitesParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchKitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchKitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchKites",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchKites/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchKitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchKitesOK), nil

}

/*
JAccountFetchMyPermissions j account fetch my permissions API
*/
func (a *Client) JAccountFetchMyPermissions(params *JAccountFetchMyPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchMyPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchMyPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchMyPermissions",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchMyPermissions/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchMyPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchMyPermissionsOK), nil

}

/*
JAccountFetchMyPermissionsAndRoles j account fetch my permissions and roles API
*/
func (a *Client) JAccountFetchMyPermissionsAndRoles(params *JAccountFetchMyPermissionsAndRolesParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchMyPermissionsAndRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchMyPermissionsAndRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchMyPermissionsAndRoles",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchMyPermissionsAndRoles/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchMyPermissionsAndRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchMyPermissionsAndRolesOK), nil

}

/*
JAccountFetchMySessions j account fetch my sessions API
*/
func (a *Client) JAccountFetchMySessions(params *JAccountFetchMySessionsParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchMySessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchMySessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchMySessions",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchMySessions/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchMySessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchMySessionsOK), nil

}

/*
JAccountFetchOAuthInfo j account fetch o auth info API
*/
func (a *Client) JAccountFetchOAuthInfo(params *JAccountFetchOAuthInfoParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchOAuthInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchOAuthInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchOAuthInfo",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchOAuthInfo/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchOAuthInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchOAuthInfoOK), nil

}

/*
JAccountFetchOtaToken j account fetch ota token API
*/
func (a *Client) JAccountFetchOtaToken(params *JAccountFetchOtaTokenParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchOtaTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchOtaTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchOtaToken",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchOtaToken/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchOtaTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchOtaTokenOK), nil

}

/*
JAccountFetchPaymentMethods j account fetch payment methods API
*/
func (a *Client) JAccountFetchPaymentMethods(params *JAccountFetchPaymentMethodsParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchPaymentMethodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchPaymentMethodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchPaymentMethods",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchPaymentMethods/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchPaymentMethodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchPaymentMethodsOK), nil

}

/*
JAccountFetchRelativeGroups Method JAccount.fetchRelativeGroups
*/
func (a *Client) JAccountFetchRelativeGroups(params *JAccountFetchRelativeGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchRelativeGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchRelativeGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchRelativeGroups",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchRelativeGroups/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchRelativeGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchRelativeGroupsOK), nil

}

/*
JAccountFetchRole j account fetch role API
*/
func (a *Client) JAccountFetchRole(params *JAccountFetchRoleParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountFetchRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountFetchRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.fetchRole",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.fetchRole/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountFetchRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountFetchRoleOK), nil

}

/*
JAccountGenerate2FactorAuthKey j account generate2 factor auth key API
*/
func (a *Client) JAccountGenerate2FactorAuthKey(params *JAccountGenerate2FactorAuthKeyParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountGenerate2FactorAuthKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountGenerate2FactorAuthKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.generate2FactorAuthKey",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.generate2FactorAuthKey/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountGenerate2FactorAuthKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountGenerate2FactorAuthKeyOK), nil

}

/*
JAccountIgnoreInvitation j account ignore invitation API
*/
func (a *Client) JAccountIgnoreInvitation(params *JAccountIgnoreInvitationParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountIgnoreInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountIgnoreInvitationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.ignoreInvitation",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.ignoreInvitation/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountIgnoreInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountIgnoreInvitationOK), nil

}

/*
JAccountIsEmailVerified Method JAccount.isEmailVerified
*/
func (a *Client) JAccountIsEmailVerified(params *JAccountIsEmailVerifiedParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountIsEmailVerifiedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountIsEmailVerifiedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.isEmailVerified",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.isEmailVerified/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountIsEmailVerifiedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountIsEmailVerifiedOK), nil

}

/*
JAccountIsFollowing j account is following API
*/
func (a *Client) JAccountIsFollowing(params *JAccountIsFollowingParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountIsFollowingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountIsFollowingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.isFollowing",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.isFollowing/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountIsFollowingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountIsFollowingOK), nil

}

/*
JAccountMarkUserAsExempt j account mark user as exempt API
*/
func (a *Client) JAccountMarkUserAsExempt(params *JAccountMarkUserAsExemptParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountMarkUserAsExemptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountMarkUserAsExemptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.markUserAsExempt",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.markUserAsExempt/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountMarkUserAsExemptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountMarkUserAsExemptOK), nil

}

/*
JAccountModify j account modify API
*/
func (a *Client) JAccountModify(params *JAccountModifyParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountModifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountModifyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.modify",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.modify/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountModifyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountModifyOK), nil

}

/*
JAccountOne j account one API
*/
func (a *Client) JAccountOne(params *JAccountOneParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.one",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountOneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountOneOK), nil

}

/*
JAccountPushNotification j account push notification API
*/
func (a *Client) JAccountPushNotification(params *JAccountPushNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountPushNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountPushNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.pushNotification",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.pushNotification/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountPushNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountPushNotificationOK), nil

}

/*
JAccountSetEmailPreferences Method JAccount.setEmailPreferences
*/
func (a *Client) JAccountSetEmailPreferences(params *JAccountSetEmailPreferencesParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountSetEmailPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountSetEmailPreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.setEmailPreferences",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.setEmailPreferences/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountSetEmailPreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountSetEmailPreferencesOK), nil

}

/*
JAccountSetup2FactorAuth j account setup2 factor auth API
*/
func (a *Client) JAccountSetup2FactorAuth(params *JAccountSetup2FactorAuthParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountSetup2FactorAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountSetup2FactorAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.setup2FactorAuth",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.setup2FactorAuth/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountSetup2FactorAuthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountSetup2FactorAuthOK), nil

}

/*
JAccountSome j account some API
*/
func (a *Client) JAccountSome(params *JAccountSomeParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.some",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountSomeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountSomeOK), nil

}

/*
JAccountSomeWithRelationship j account some with relationship API
*/
func (a *Client) JAccountSomeWithRelationship(params *JAccountSomeWithRelationshipParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountSomeWithRelationshipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountSomeWithRelationshipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.someWithRelationship",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.someWithRelationship",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountSomeWithRelationshipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountSomeWithRelationshipOK), nil

}

/*
JAccountUnblockUser j account unblock user API
*/
func (a *Client) JAccountUnblockUser(params *JAccountUnblockUserParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountUnblockUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountUnblockUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.unblockUser",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.unblockUser/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountUnblockUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountUnblockUserOK), nil

}

/*
JAccountUnlinkOauth j account unlink oauth API
*/
func (a *Client) JAccountUnlinkOauth(params *JAccountUnlinkOauthParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountUnlinkOauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountUnlinkOauthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.unlinkOauth",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.unlinkOauth/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountUnlinkOauthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountUnlinkOauthOK), nil

}

/*
JAccountUpdateFlags j account update flags API
*/
func (a *Client) JAccountUpdateFlags(params *JAccountUpdateFlagsParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountUpdateFlagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountUpdateFlagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.updateFlags",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.updateFlags/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountUpdateFlagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountUpdateFlagsOK), nil

}

/*
JAccountVerifyEmailByUsername j account verify email by username API
*/
func (a *Client) JAccountVerifyEmailByUsername(params *JAccountVerifyEmailByUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*JAccountVerifyEmailByUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJAccountVerifyEmailByUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JAccount.verifyEmailByUsername",
		Method:             "POST",
		PathPattern:        "/remote.api/JAccount.verifyEmailByUsername",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JAccountVerifyEmailByUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JAccountVerifyEmailByUsernameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
