package j_proxy_restriction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j proxy restriction API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j proxy restriction API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JProxyRestrictionClear j proxy restriction clear API
*/
func (a *Client) JProxyRestrictionClear(params *JProxyRestrictionClearParams, authInfo runtime.ClientAuthInfoWriter) (*JProxyRestrictionClearOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProxyRestrictionClearParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProxyRestriction.clear",
		Method:             "POST",
		PathPattern:        "/remote.api/JProxyRestriction.clear",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProxyRestrictionClearReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProxyRestrictionClearOK), nil

}

/*
JProxyRestrictionCreate j proxy restriction create API
*/
func (a *Client) JProxyRestrictionCreate(params *JProxyRestrictionCreateParams, authInfo runtime.ClientAuthInfoWriter) (*JProxyRestrictionCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProxyRestrictionCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProxyRestriction.create",
		Method:             "POST",
		PathPattern:        "/remote.api/JProxyRestriction.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProxyRestrictionCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProxyRestrictionCreateOK), nil

}

/*
JProxyRestrictionRemove j proxy restriction remove API
*/
func (a *Client) JProxyRestrictionRemove(params *JProxyRestrictionRemoveParams, authInfo runtime.ClientAuthInfoWriter) (*JProxyRestrictionRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProxyRestrictionRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProxyRestriction.remove",
		Method:             "POST",
		PathPattern:        "/remote.api/JProxyRestriction.remove",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProxyRestrictionRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProxyRestrictionRemoveOK), nil

}

/*
JProxyRestrictionSome j proxy restriction some API
*/
func (a *Client) JProxyRestrictionSome(params *JProxyRestrictionSomeParams, authInfo runtime.ClientAuthInfoWriter) (*JProxyRestrictionSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProxyRestrictionSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProxyRestriction.some",
		Method:             "POST",
		PathPattern:        "/remote.api/JProxyRestriction.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProxyRestrictionSomeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProxyRestrictionSomeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
