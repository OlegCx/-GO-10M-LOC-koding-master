package j_proxy_restriction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"koding/remoteapi/models"
)

// JProxyRestrictionClearReader is a Reader for the JProxyRestrictionClear structure.
type JProxyRestrictionClearReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *JProxyRestrictionClearReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewJProxyRestrictionClearOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewJProxyRestrictionClearUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewJProxyRestrictionClearOK creates a JProxyRestrictionClearOK with default headers values
func NewJProxyRestrictionClearOK() *JProxyRestrictionClearOK {
	return &JProxyRestrictionClearOK{}
}

/*JProxyRestrictionClearOK handles this case with default header values.

Request processed successfully
*/
type JProxyRestrictionClearOK struct {
	Payload *models.DefaultResponse
}

func (o *JProxyRestrictionClearOK) Error() string {
	return fmt.Sprintf("[POST /remote.api/JProxyRestriction.clear][%d] jProxyRestrictionClearOK  %+v", 200, o.Payload)
}

func (o *JProxyRestrictionClearOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DefaultResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewJProxyRestrictionClearUnauthorized creates a JProxyRestrictionClearUnauthorized with default headers values
func NewJProxyRestrictionClearUnauthorized() *JProxyRestrictionClearUnauthorized {
	return &JProxyRestrictionClearUnauthorized{}
}

/*JProxyRestrictionClearUnauthorized handles this case with default header values.

Unauthorized request
*/
type JProxyRestrictionClearUnauthorized struct {
	Payload *models.UnauthorizedRequest
}

func (o *JProxyRestrictionClearUnauthorized) Error() string {
	return fmt.Sprintf("[POST /remote.api/JProxyRestriction.clear][%d] jProxyRestrictionClearUnauthorized  %+v", 401, o.Payload)
}

func (o *JProxyRestrictionClearUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnauthorizedRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
