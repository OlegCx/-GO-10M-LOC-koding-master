package j_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JUserAuthenticateWithOauth j user authenticate with oauth API
*/
func (a *Client) JUserAuthenticateWithOauth(params *JUserAuthenticateWithOauthParams, authInfo runtime.ClientAuthInfoWriter) (*JUserAuthenticateWithOauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserAuthenticateWithOauthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.authenticateWithOauth",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.authenticateWithOauth",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserAuthenticateWithOauthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserAuthenticateWithOauthOK), nil

}

/*
JUserChangeEmail j user change email API
*/
func (a *Client) JUserChangeEmail(params *JUserChangeEmailParams, authInfo runtime.ClientAuthInfoWriter) (*JUserChangeEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserChangeEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.changeEmail",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.changeEmail",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserChangeEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserChangeEmailOK), nil

}

/*
JUserChangePassword j user change password API
*/
func (a *Client) JUserChangePassword(params *JUserChangePasswordParams, authInfo runtime.ClientAuthInfoWriter) (*JUserChangePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserChangePasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.changePassword",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.changePassword",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserChangePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserChangePasswordOK), nil

}

/*
JUserConvert j user convert API
*/
func (a *Client) JUserConvert(params *JUserConvertParams, authInfo runtime.ClientAuthInfoWriter) (*JUserConvertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserConvertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.convert",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.convert",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserConvertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserConvertOK), nil

}

/*
JUserEmailAvailable Method JUser.emailAvailable
*/
func (a *Client) JUserEmailAvailable(params *JUserEmailAvailableParams, authInfo runtime.ClientAuthInfoWriter) (*JUserEmailAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserEmailAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.emailAvailable",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.emailAvailable",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserEmailAvailableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserEmailAvailableOK), nil

}

/*
JUserFetchUser j user fetch user API
*/
func (a *Client) JUserFetchUser(params *JUserFetchUserParams, authInfo runtime.ClientAuthInfoWriter) (*JUserFetchUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserFetchUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.fetchUser",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.fetchUser",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserFetchUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserFetchUserOK), nil

}

/*
JUserGetSSHKeys j user get SSH keys API
*/
func (a *Client) JUserGetSSHKeys(params *JUserGetSSHKeysParams, authInfo runtime.ClientAuthInfoWriter) (*JUserGetSSHKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserGetSSHKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.getSSHKeys",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.getSSHKeys",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserGetSSHKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserGetSSHKeysOK), nil

}

/*
JUserLogin Method JUser.login
*/
func (a *Client) JUserLogin(params *JUserLoginParams, authInfo runtime.ClientAuthInfoWriter) (*JUserLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.login",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.login",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserLoginOK), nil

}

/*
JUserLogout j user logout API
*/
func (a *Client) JUserLogout(params *JUserLogoutParams, authInfo runtime.ClientAuthInfoWriter) (*JUserLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserLogoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.logout",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.logout",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserLogoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserLogoutOK), nil

}

/*
JUserSetSSHKeys j user set SSH keys API
*/
func (a *Client) JUserSetSSHKeys(params *JUserSetSSHKeysParams, authInfo runtime.ClientAuthInfoWriter) (*JUserSetSSHKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserSetSSHKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.setSSHKeys",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.setSSHKeys",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserSetSSHKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserSetSSHKeysOK), nil

}

/*
JUserUnregister j user unregister API
*/
func (a *Client) JUserUnregister(params *JUserUnregisterParams, authInfo runtime.ClientAuthInfoWriter) (*JUserUnregisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserUnregisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.unregister",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.unregister",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserUnregisterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserUnregisterOK), nil

}

/*
JUserUsernameAvailable Method JUser.usernameAvailable
*/
func (a *Client) JUserUsernameAvailable(params *JUserUsernameAvailableParams, authInfo runtime.ClientAuthInfoWriter) (*JUserUsernameAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserUsernameAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.usernameAvailable",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.usernameAvailable",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserUsernameAvailableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserUsernameAvailableOK), nil

}

/*
JUserVerifyByPin j user verify by pin API
*/
func (a *Client) JUserVerifyByPin(params *JUserVerifyByPinParams, authInfo runtime.ClientAuthInfoWriter) (*JUserVerifyByPinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserVerifyByPinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.verifyByPin",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.verifyByPin",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserVerifyByPinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserVerifyByPinOK), nil

}

/*
JUserVerifyPassword j user verify password API
*/
func (a *Client) JUserVerifyPassword(params *JUserVerifyPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*JUserVerifyPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserVerifyPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.verifyPassword",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.verifyPassword",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserVerifyPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserVerifyPasswordOK), nil

}

/*
JUserWhoami whoami

Returns your JAccount instance based on the session data
*/
func (a *Client) JUserWhoami(params *JUserWhoamiParams, authInfo runtime.ClientAuthInfoWriter) (*JUserWhoamiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJUserWhoamiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JUser.whoami",
		Method:             "POST",
		PathPattern:        "/remote.api/JUser.whoami",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JUserWhoamiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JUserWhoamiOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
