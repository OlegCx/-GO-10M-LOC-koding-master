package j_custom_partials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j custom partials API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j custom partials API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JCustomPartialsCreate j custom partials create API
*/
func (a *Client) JCustomPartialsCreate(params *JCustomPartialsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*JCustomPartialsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCustomPartialsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCustomPartials.create",
		Method:             "POST",
		PathPattern:        "/remote.api/JCustomPartials.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCustomPartialsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCustomPartialsCreateOK), nil

}

/*
JCustomPartialsRemove j custom partials remove API
*/
func (a *Client) JCustomPartialsRemove(params *JCustomPartialsRemoveParams, authInfo runtime.ClientAuthInfoWriter) (*JCustomPartialsRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCustomPartialsRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCustomPartials.remove",
		Method:             "POST",
		PathPattern:        "/remote.api/JCustomPartials.remove/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCustomPartialsRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCustomPartialsRemoveOK), nil

}

/*
JCustomPartialsSome j custom partials some API
*/
func (a *Client) JCustomPartialsSome(params *JCustomPartialsSomeParams, authInfo runtime.ClientAuthInfoWriter) (*JCustomPartialsSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCustomPartialsSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCustomPartials.some",
		Method:             "POST",
		PathPattern:        "/remote.api/JCustomPartials.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCustomPartialsSomeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCustomPartialsSomeOK), nil

}

/*
JCustomPartialsUpdate j custom partials update API
*/
func (a *Client) JCustomPartialsUpdate(params *JCustomPartialsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*JCustomPartialsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCustomPartialsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCustomPartials.update",
		Method:             "POST",
		PathPattern:        "/remote.api/JCustomPartials.update/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCustomPartialsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCustomPartialsUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
