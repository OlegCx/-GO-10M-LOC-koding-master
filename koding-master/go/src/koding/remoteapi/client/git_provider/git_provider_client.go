package git_provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new git provider API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for git provider API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GitProviderCreateImportedStackTemplate git provider create imported stack template API
*/
func (a *Client) GitProviderCreateImportedStackTemplate(params *GitProviderCreateImportedStackTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GitProviderCreateImportedStackTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGitProviderCreateImportedStackTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GitProvider.createImportedStackTemplate",
		Method:             "POST",
		PathPattern:        "/remote.api/GitProvider.createImportedStackTemplate",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GitProviderCreateImportedStackTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GitProviderCreateImportedStackTemplateOK), nil

}

/*
GitProviderFetchConfig git provider fetch config API
*/
func (a *Client) GitProviderFetchConfig(params *GitProviderFetchConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GitProviderFetchConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGitProviderFetchConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GitProvider.fetchConfig",
		Method:             "POST",
		PathPattern:        "/remote.api/GitProvider.fetchConfig",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GitProviderFetchConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GitProviderFetchConfigOK), nil

}

/*
GitProviderImportStackTemplateData git provider import stack template data API
*/
func (a *Client) GitProviderImportStackTemplateData(params *GitProviderImportStackTemplateDataParams, authInfo runtime.ClientAuthInfoWriter) (*GitProviderImportStackTemplateDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGitProviderImportStackTemplateDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GitProvider.importStackTemplateData",
		Method:             "POST",
		PathPattern:        "/remote.api/GitProvider.importStackTemplateData",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GitProviderImportStackTemplateDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GitProviderImportStackTemplateDataOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
