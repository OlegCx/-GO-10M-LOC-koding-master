package collaboration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new collaboration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for collaboration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CollaborationAdd collaboration add API
*/
func (a *Client) CollaborationAdd(params *CollaborationAddParams, authInfo runtime.ClientAuthInfoWriter) (*CollaborationAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollaborationAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Collaboration.add",
		Method:             "POST",
		PathPattern:        "/remote.api/Collaboration.add",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollaborationAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CollaborationAddOK), nil

}

/*
CollaborationKick collaboration kick API
*/
func (a *Client) CollaborationKick(params *CollaborationKickParams, authInfo runtime.ClientAuthInfoWriter) (*CollaborationKickOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollaborationKickParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Collaboration.kick",
		Method:             "POST",
		PathPattern:        "/remote.api/Collaboration.kick",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollaborationKickReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CollaborationKickOK), nil

}

/*
CollaborationStop collaboration stop API
*/
func (a *Client) CollaborationStop(params *CollaborationStopParams, authInfo runtime.ClientAuthInfoWriter) (*CollaborationStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollaborationStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Collaboration.stop",
		Method:             "POST",
		PathPattern:        "/remote.api/Collaboration.stop",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollaborationStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CollaborationStopOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
