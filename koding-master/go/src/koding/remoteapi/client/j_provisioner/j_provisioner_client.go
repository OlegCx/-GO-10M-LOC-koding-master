package j_provisioner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j provisioner API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j provisioner API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JProvisionerCreate j provisioner create API
*/
func (a *Client) JProvisionerCreate(params *JProvisionerCreateParams, authInfo runtime.ClientAuthInfoWriter) (*JProvisionerCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProvisionerCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProvisioner.create",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProvisionerCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProvisionerCreateOK), nil

}

/*
JProvisionerDelete j provisioner delete API
*/
func (a *Client) JProvisionerDelete(params *JProvisionerDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*JProvisionerDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProvisionerDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProvisioner.delete",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.delete/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProvisionerDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProvisionerDeleteOK), nil

}

/*
JProvisionerOne j provisioner one API
*/
func (a *Client) JProvisionerOne(params *JProvisionerOneParams, authInfo runtime.ClientAuthInfoWriter) (*JProvisionerOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProvisionerOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProvisioner.one",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProvisionerOneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProvisionerOneOK), nil

}

/*
JProvisionerSetAccess j provisioner set access API
*/
func (a *Client) JProvisionerSetAccess(params *JProvisionerSetAccessParams, authInfo runtime.ClientAuthInfoWriter) (*JProvisionerSetAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProvisionerSetAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProvisioner.setAccess",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.setAccess/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProvisionerSetAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProvisionerSetAccessOK), nil

}

/*
JProvisionerSome j provisioner some API
*/
func (a *Client) JProvisionerSome(params *JProvisionerSomeParams, authInfo runtime.ClientAuthInfoWriter) (*JProvisionerSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProvisionerSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProvisioner.some",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProvisionerSomeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProvisionerSomeOK), nil

}

/*
JProvisionerUpdate j provisioner update API
*/
func (a *Client) JProvisionerUpdate(params *JProvisionerUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*JProvisionerUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProvisionerUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProvisioner.update",
		Method:             "POST",
		PathPattern:        "/remote.api/JProvisioner.update/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProvisionerUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProvisionerUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
