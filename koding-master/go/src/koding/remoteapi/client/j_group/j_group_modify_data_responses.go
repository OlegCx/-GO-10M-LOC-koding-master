package j_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"koding/remoteapi/models"
)

// JGroupModifyDataReader is a Reader for the JGroupModifyData structure.
type JGroupModifyDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *JGroupModifyDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewJGroupModifyDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewJGroupModifyDataOK creates a JGroupModifyDataOK with default headers values
func NewJGroupModifyDataOK() *JGroupModifyDataOK {
	return &JGroupModifyDataOK{}
}

/*JGroupModifyDataOK handles this case with default header values.

includes error if something went wrong
*/
type JGroupModifyDataOK struct {
	Payload *models.Error
}

func (o *JGroupModifyDataOK) Error() string {
	return fmt.Sprintf("[POST /remote.api/JGroup.modifyData/{id}][%d] jGroupModifyDataOK  %+v", 200, o.Payload)
}

func (o *JGroupModifyDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*JGroupModifyDataBody j group modify data body
swagger:model JGroupModifyDataBody
*/
type JGroupModifyDataBody struct {

	// github organization token
	// Required: true
	GithubOrganizationToken *string `json:"github.organizationToken"`
}
