package j_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JGroupAddSubscription j group add subscription API
*/
func (a *Client) JGroupAddSubscription(params *JGroupAddSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupAddSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupAddSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.addSubscription",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.addSubscription/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupAddSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupAddSubscriptionOK), nil

}

/*
JGroupByRelevance j group by relevance API
*/
func (a *Client) JGroupByRelevance(params *JGroupByRelevanceParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupByRelevanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupByRelevanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.byRelevance",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.byRelevance",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupByRelevanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupByRelevanceOK), nil

}

/*
JGroupCanEditGroup j group can edit group API
*/
func (a *Client) JGroupCanEditGroup(params *JGroupCanEditGroupParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupCanEditGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupCanEditGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.canEditGroup",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.canEditGroup/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupCanEditGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupCanEditGroupOK), nil

}

/*
JGroupChangeMemberRoles j group change member roles API
*/
func (a *Client) JGroupChangeMemberRoles(params *JGroupChangeMemberRolesParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupChangeMemberRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupChangeMemberRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.changeMemberRoles",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.changeMemberRoles/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupChangeMemberRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupChangeMemberRolesOK), nil

}

/*
JGroupCount j group count API
*/
func (a *Client) JGroupCount(params *JGroupCountParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.count",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.count",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupCountOK), nil

}

/*
JGroupCreate Method JGroup.create
*/
func (a *Client) JGroupCreate(params *JGroupCreateParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.create",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupCreateOK), nil

}

/*
JGroupDestroy Method JGroup.destroy
*/
func (a *Client) JGroupDestroy(params *JGroupDestroyParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupDestroyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupDestroyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.destroy",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.destroy/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupDestroyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupDestroyOK), nil

}

/*
JGroupEach j group each API
*/
func (a *Client) JGroupEach(params *JGroupEachParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupEachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupEachParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.each",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.each",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupEachReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupEachOK), nil

}

/*
JGroupFetchAdmins j group fetch admins API
*/
func (a *Client) JGroupFetchAdmins(params *JGroupFetchAdminsParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchAdminsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchAdminsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchAdmins",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchAdmins/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchAdminsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchAdminsOK), nil

}

/*
JGroupFetchAdminsWithEmail j group fetch admins with email API
*/
func (a *Client) JGroupFetchAdminsWithEmail(params *JGroupFetchAdminsWithEmailParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchAdminsWithEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchAdminsWithEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchAdminsWithEmail",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchAdminsWithEmail/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchAdminsWithEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchAdminsWithEmailOK), nil

}

/*
JGroupFetchAPITokens j group fetch Api tokens API
*/
func (a *Client) JGroupFetchAPITokens(params *JGroupFetchAPITokensParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchAPITokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchAPITokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchApiTokens",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchApiTokens/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchAPITokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchAPITokensOK), nil

}

/*
JGroupFetchBlockedAccounts j group fetch blocked accounts API
*/
func (a *Client) JGroupFetchBlockedAccounts(params *JGroupFetchBlockedAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchBlockedAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchBlockedAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchBlockedAccounts",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchBlockedAccounts/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchBlockedAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchBlockedAccountsOK), nil

}

/*
JGroupFetchBlockedAccountsWithEmail j group fetch blocked accounts with email API
*/
func (a *Client) JGroupFetchBlockedAccountsWithEmail(params *JGroupFetchBlockedAccountsWithEmailParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchBlockedAccountsWithEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchBlockedAccountsWithEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchBlockedAccountsWithEmail",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchBlockedAccountsWithEmail/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchBlockedAccountsWithEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchBlockedAccountsWithEmailOK), nil

}

/*
JGroupFetchDataAt Method JGroup.fetchDataAt
*/
func (a *Client) JGroupFetchDataAt(params *JGroupFetchDataAtParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchDataAtOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchDataAtParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchDataAt",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchDataAt/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchDataAtReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchDataAtOK), nil

}

/*
JGroupFetchMembers j group fetch members API
*/
func (a *Client) JGroupFetchMembers(params *JGroupFetchMembersParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchMembers",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchMembers/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchMembersOK), nil

}

/*
JGroupFetchMembersWithEmail Method JGroup.fetchMembersWithEmail
*/
func (a *Client) JGroupFetchMembersWithEmail(params *JGroupFetchMembersWithEmailParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchMembersWithEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchMembersWithEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchMembersWithEmail",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchMembersWithEmail/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchMembersWithEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchMembersWithEmailOK), nil

}

/*
JGroupFetchModerators j group fetch moderators API
*/
func (a *Client) JGroupFetchModerators(params *JGroupFetchModeratorsParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchModeratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchModeratorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchModerators",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchModerators/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchModeratorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchModeratorsOK), nil

}

/*
JGroupFetchModeratorsWithEmail j group fetch moderators with email API
*/
func (a *Client) JGroupFetchModeratorsWithEmail(params *JGroupFetchModeratorsWithEmailParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchModeratorsWithEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchModeratorsWithEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchModeratorsWithEmail",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchModeratorsWithEmail/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchModeratorsWithEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchModeratorsWithEmailOK), nil

}

/*
JGroupFetchMyMemberships j group fetch my memberships API
*/
func (a *Client) JGroupFetchMyMemberships(params *JGroupFetchMyMembershipsParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchMyMembershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchMyMembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchMyMemberships",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchMyMemberships",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchMyMembershipsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchMyMembershipsOK), nil

}

/*
JGroupFetchMyRoles j group fetch my roles API
*/
func (a *Client) JGroupFetchMyRoles(params *JGroupFetchMyRolesParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchMyRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchMyRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchMyRoles",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchMyRoles/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchMyRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchMyRolesOK), nil

}

/*
JGroupFetchPermissionSetOrDefault Method JGroup.fetchPermissionSetOrDefault
*/
func (a *Client) JGroupFetchPermissionSetOrDefault(params *JGroupFetchPermissionSetOrDefaultParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchPermissionSetOrDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchPermissionSetOrDefaultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchPermissionSetOrDefault",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchPermissionSetOrDefault/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchPermissionSetOrDefaultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchPermissionSetOrDefaultOK), nil

}

/*
JGroupFetchPermissions j group fetch permissions API
*/
func (a *Client) JGroupFetchPermissions(params *JGroupFetchPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchPermissions",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchPermissions/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchPermissionsOK), nil

}

/*
JGroupFetchResources j group fetch resources API
*/
func (a *Client) JGroupFetchResources(params *JGroupFetchResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchResources",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchResources/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchResourcesOK), nil

}

/*
JGroupFetchRoles j group fetch roles API
*/
func (a *Client) JGroupFetchRoles(params *JGroupFetchRolesParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchRoles",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchRoles/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchRolesOK), nil

}

/*
JGroupFetchSubscription j group fetch subscription API
*/
func (a *Client) JGroupFetchSubscription(params *JGroupFetchSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchSubscription",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchSubscription/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchSubscriptionOK), nil

}

/*
JGroupFetchUserRoles j group fetch user roles API
*/
func (a *Client) JGroupFetchUserRoles(params *JGroupFetchUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchUserRoles",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchUserRoles/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchUserRolesOK), nil

}

/*
JGroupFetchUserStatus j group fetch user status API
*/
func (a *Client) JGroupFetchUserStatus(params *JGroupFetchUserStatusParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupFetchUserStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupFetchUserStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.fetchUserStatus",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.fetchUserStatus/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupFetchUserStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupFetchUserStatusOK), nil

}

/*
JGroupIsMember Method JGroup.isMember
*/
func (a *Client) JGroupIsMember(params *JGroupIsMemberParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupIsMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupIsMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.isMember",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.isMember/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupIsMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupIsMemberOK), nil

}

/*
JGroupJoin j group join API
*/
func (a *Client) JGroupJoin(params *JGroupJoinParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupJoinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupJoinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.join",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.join/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupJoinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupJoinOK), nil

}

/*
JGroupJoinUser joinUser

Joins user with given options to group either by logging in or converting
them.
*/
func (a *Client) JGroupJoinUser(params *JGroupJoinUserParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupJoinUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupJoinUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.joinUser",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.joinUser",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupJoinUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupJoinUserOK), nil

}

/*
JGroupKickMember j group kick member API
*/
func (a *Client) JGroupKickMember(params *JGroupKickMemberParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupKickMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupKickMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.kickMember",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.kickMember/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupKickMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupKickMemberOK), nil

}

/*
JGroupLeave Method JGroup.leave
*/
func (a *Client) JGroupLeave(params *JGroupLeaveParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupLeaveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupLeaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.leave",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.leave/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupLeaveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupLeaveOK), nil

}

/*
JGroupModify j group modify API
*/
func (a *Client) JGroupModify(params *JGroupModifyParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupModifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupModifyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.modify",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.modify/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupModifyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupModifyOK), nil

}

/*
JGroupModifyData modifies JGroupData related with the JGroup instance
*/
func (a *Client) JGroupModifyData(params *JGroupModifyDataParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupModifyDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupModifyDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.modifyData",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.modifyData/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupModifyDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupModifyDataOK), nil

}

/*
JGroupOne j group one API
*/
func (a *Client) JGroupOne(params *JGroupOneParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.one",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupOneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupOneOK), nil

}

/*
JGroupSearchMembers j group search members API
*/
func (a *Client) JGroupSearchMembers(params *JGroupSearchMembersParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupSearchMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupSearchMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.searchMembers",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.searchMembers/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupSearchMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupSearchMembersOK), nil

}

/*
JGroupSendNotification Method JGroup.sendNotification
*/
func (a *Client) JGroupSendNotification(params *JGroupSendNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupSendNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupSendNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.sendNotification",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.sendNotification/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupSendNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupSendNotificationOK), nil

}

/*
JGroupSetLimit j group set limit API
*/
func (a *Client) JGroupSetLimit(params *JGroupSetLimitParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupSetLimitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupSetLimitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.setLimit",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.setLimit/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupSetLimitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupSetLimitOK), nil

}

/*
JGroupSetOAuth j group set o auth API
*/
func (a *Client) JGroupSetOAuth(params *JGroupSetOAuthParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupSetOAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupSetOAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.setOAuth",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.setOAuth/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupSetOAuthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupSetOAuthOK), nil

}

/*
JGroupSomeWithRelationship j group some with relationship API
*/
func (a *Client) JGroupSomeWithRelationship(params *JGroupSomeWithRelationshipParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupSomeWithRelationshipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupSomeWithRelationshipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.someWithRelationship",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.someWithRelationship",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupSomeWithRelationshipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupSomeWithRelationshipOK), nil

}

/*
JGroupSuggestUniqueSlug j group suggest unique slug API
*/
func (a *Client) JGroupSuggestUniqueSlug(params *JGroupSuggestUniqueSlugParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupSuggestUniqueSlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupSuggestUniqueSlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.suggestUniqueSlug",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.suggestUniqueSlug",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupSuggestUniqueSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupSuggestUniqueSlugOK), nil

}

/*
JGroupToggleFeature j group toggle feature API
*/
func (a *Client) JGroupToggleFeature(params *JGroupToggleFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupToggleFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupToggleFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.toggleFeature",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.toggleFeature/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupToggleFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupToggleFeatureOK), nil

}

/*
JGroupTransferOwnership Method JGroup.transferOwnership
*/
func (a *Client) JGroupTransferOwnership(params *JGroupTransferOwnershipParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupTransferOwnershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupTransferOwnershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.transferOwnership",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.transferOwnership/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupTransferOwnershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupTransferOwnershipOK), nil

}

/*
JGroupUnblockMember j group unblock member API
*/
func (a *Client) JGroupUnblockMember(params *JGroupUnblockMemberParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupUnblockMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupUnblockMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.unblockMember",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.unblockMember/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupUnblockMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupUnblockMemberOK), nil

}

/*
JGroupUpdatePermissions j group update permissions API
*/
func (a *Client) JGroupUpdatePermissions(params *JGroupUpdatePermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*JGroupUpdatePermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJGroupUpdatePermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JGroup.updatePermissions",
		Method:             "POST",
		PathPattern:        "/remote.api/JGroup.updatePermissions/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JGroupUpdatePermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JGroupUpdatePermissionsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
