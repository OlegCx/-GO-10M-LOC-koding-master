package compute_provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new compute provider API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compute provider API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ComputeProviderCreate creates a JMachine for requested provider with the provided options
*/
func (a *Client) ComputeProviderCreate(params *ComputeProviderCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ComputeProviderCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComputeProviderCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ComputeProvider.create",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComputeProviderCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ComputeProviderCreateOK), nil

}

/*
ComputeProviderCreateGroupStack Method ComputeProvider.createGroupStack
*/
func (a *Client) ComputeProviderCreateGroupStack(params *ComputeProviderCreateGroupStackParams, authInfo runtime.ClientAuthInfoWriter) (*ComputeProviderCreateGroupStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComputeProviderCreateGroupStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ComputeProvider.createGroupStack",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.createGroupStack",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComputeProviderCreateGroupStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ComputeProviderCreateGroupStackOK), nil

}

/*
ComputeProviderFetchAvailable compute provider fetch available API
*/
func (a *Client) ComputeProviderFetchAvailable(params *ComputeProviderFetchAvailableParams, authInfo runtime.ClientAuthInfoWriter) (*ComputeProviderFetchAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComputeProviderFetchAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ComputeProvider.fetchAvailable",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.fetchAvailable",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComputeProviderFetchAvailableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ComputeProviderFetchAvailableOK), nil

}

/*
ComputeProviderFetchProviders compute provider fetch providers API
*/
func (a *Client) ComputeProviderFetchProviders(params *ComputeProviderFetchProvidersParams, authInfo runtime.ClientAuthInfoWriter) (*ComputeProviderFetchProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComputeProviderFetchProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ComputeProvider.fetchProviders",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.fetchProviders",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComputeProviderFetchProvidersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ComputeProviderFetchProvidersOK), nil

}

/*
ComputeProviderPing pings to requested provider implementation
*/
func (a *Client) ComputeProviderPing(params *ComputeProviderPingParams, authInfo runtime.ClientAuthInfoWriter) (*ComputeProviderPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComputeProviderPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ComputeProvider.ping",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.ping",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComputeProviderPingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ComputeProviderPingOK), nil

}

/*
ComputeProviderRemove compute provider remove API
*/
func (a *Client) ComputeProviderRemove(params *ComputeProviderRemoveParams, authInfo runtime.ClientAuthInfoWriter) (*ComputeProviderRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComputeProviderRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ComputeProvider.remove",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.remove",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComputeProviderRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ComputeProviderRemoveOK), nil

}

/*
ComputeProviderUpdate compute provider update API
*/
func (a *Client) ComputeProviderUpdate(params *ComputeProviderUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ComputeProviderUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComputeProviderUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ComputeProvider.update",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.update",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComputeProviderUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ComputeProviderUpdateOK), nil

}

/*
ComputeProviderUpdateTeamCounters Method ComputeProvider.updateTeamCounters
*/
func (a *Client) ComputeProviderUpdateTeamCounters(params *ComputeProviderUpdateTeamCountersParams, authInfo runtime.ClientAuthInfoWriter) (*ComputeProviderUpdateTeamCountersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewComputeProviderUpdateTeamCountersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ComputeProvider.updateTeamCounters",
		Method:             "POST",
		PathPattern:        "/remote.api/ComputeProvider.updateTeamCounters",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ComputeProviderUpdateTeamCountersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ComputeProviderUpdateTeamCountersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
