package j_credential

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j credential API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j credential API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JCredentialBootstrap j credential bootstrap API
*/
func (a *Client) JCredentialBootstrap(params *JCredentialBootstrapParams, authInfo runtime.ClientAuthInfoWriter) (*JCredentialBootstrapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCredentialBootstrapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCredential.bootstrap",
		Method:             "POST",
		PathPattern:        "/remote.api/JCredential.bootstrap/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCredentialBootstrapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCredentialBootstrapOK), nil

}

/*
JCredentialClone j credential clone API
*/
func (a *Client) JCredentialClone(params *JCredentialCloneParams, authInfo runtime.ClientAuthInfoWriter) (*JCredentialCloneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCredentialCloneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCredential.clone",
		Method:             "POST",
		PathPattern:        "/remote.api/JCredential.clone/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCredentialCloneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCredentialCloneOK), nil

}

/*
JCredentialCreate j credential create API
*/
func (a *Client) JCredentialCreate(params *JCredentialCreateParams, authInfo runtime.ClientAuthInfoWriter) (*JCredentialCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCredentialCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCredential.create",
		Method:             "POST",
		PathPattern:        "/remote.api/JCredential.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCredentialCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCredentialCreateOK), nil

}

/*
JCredentialDelete j credential delete API
*/
func (a *Client) JCredentialDelete(params *JCredentialDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*JCredentialDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCredentialDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCredential.delete",
		Method:             "POST",
		PathPattern:        "/remote.api/JCredential.delete/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCredentialDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCredentialDeleteOK), nil

}

/*
JCredentialFetchData Method JCredential.fetchData
*/
func (a *Client) JCredentialFetchData(params *JCredentialFetchDataParams, authInfo runtime.ClientAuthInfoWriter) (*JCredentialFetchDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCredentialFetchDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCredential.fetchData",
		Method:             "POST",
		PathPattern:        "/remote.api/JCredential.fetchData/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCredentialFetchDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCredentialFetchDataOK), nil

}

/*
JCredentialFetchUsers j credential fetch users API
*/
func (a *Client) JCredentialFetchUsers(params *JCredentialFetchUsersParams, authInfo runtime.ClientAuthInfoWriter) (*JCredentialFetchUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCredentialFetchUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCredential.fetchUsers",
		Method:             "POST",
		PathPattern:        "/remote.api/JCredential.fetchUsers/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCredentialFetchUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCredentialFetchUsersOK), nil

}

/*
JCredentialIsBootstrapped j credential is bootstrapped API
*/
func (a *Client) JCredentialIsBootstrapped(params *JCredentialIsBootstrappedParams, authInfo runtime.ClientAuthInfoWriter) (*JCredentialIsBootstrappedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCredentialIsBootstrappedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCredential.isBootstrapped",
		Method:             "POST",
		PathPattern:        "/remote.api/JCredential.isBootstrapped/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCredentialIsBootstrappedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCredentialIsBootstrappedOK), nil

}

/*
JCredentialOne j credential one API
*/
func (a *Client) JCredentialOne(params *JCredentialOneParams, authInfo runtime.ClientAuthInfoWriter) (*JCredentialOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCredentialOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCredential.one",
		Method:             "POST",
		PathPattern:        "/remote.api/JCredential.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCredentialOneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCredentialOneOK), nil

}

/*
JCredentialShareWith Method JCredential.shareWith
*/
func (a *Client) JCredentialShareWith(params *JCredentialShareWithParams, authInfo runtime.ClientAuthInfoWriter) (*JCredentialShareWithOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCredentialShareWithParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCredential.shareWith",
		Method:             "POST",
		PathPattern:        "/remote.api/JCredential.shareWith/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCredentialShareWithReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCredentialShareWithOK), nil

}

/*
JCredentialSome j credential some API
*/
func (a *Client) JCredentialSome(params *JCredentialSomeParams, authInfo runtime.ClientAuthInfoWriter) (*JCredentialSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCredentialSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCredential.some",
		Method:             "POST",
		PathPattern:        "/remote.api/JCredential.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCredentialSomeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCredentialSomeOK), nil

}

/*
JCredentialUpdate j credential update API
*/
func (a *Client) JCredentialUpdate(params *JCredentialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*JCredentialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJCredentialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JCredential.update",
		Method:             "POST",
		PathPattern:        "/remote.api/JCredential.update/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JCredentialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JCredentialUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
