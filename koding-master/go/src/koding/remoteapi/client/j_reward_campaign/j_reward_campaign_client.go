package j_reward_campaign

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j reward campaign API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j reward campaign API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JRewardCampaignCreate j reward campaign create API
*/
func (a *Client) JRewardCampaignCreate(params *JRewardCampaignCreateParams, authInfo runtime.ClientAuthInfoWriter) (*JRewardCampaignCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJRewardCampaignCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JRewardCampaign.create",
		Method:             "POST",
		PathPattern:        "/remote.api/JRewardCampaign.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JRewardCampaignCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JRewardCampaignCreateOK), nil

}

/*
JRewardCampaignIsValid j reward campaign is valid API
*/
func (a *Client) JRewardCampaignIsValid(params *JRewardCampaignIsValidParams, authInfo runtime.ClientAuthInfoWriter) (*JRewardCampaignIsValidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJRewardCampaignIsValidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JRewardCampaign.isValid",
		Method:             "POST",
		PathPattern:        "/remote.api/JRewardCampaign.isValid",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JRewardCampaignIsValidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JRewardCampaignIsValidOK), nil

}

/*
JRewardCampaignOne j reward campaign one API
*/
func (a *Client) JRewardCampaignOne(params *JRewardCampaignOneParams, authInfo runtime.ClientAuthInfoWriter) (*JRewardCampaignOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJRewardCampaignOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JRewardCampaign.one",
		Method:             "POST",
		PathPattern:        "/remote.api/JRewardCampaign.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JRewardCampaignOneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JRewardCampaignOneOK), nil

}

/*
JRewardCampaignRemove j reward campaign remove API
*/
func (a *Client) JRewardCampaignRemove(params *JRewardCampaignRemoveParams, authInfo runtime.ClientAuthInfoWriter) (*JRewardCampaignRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJRewardCampaignRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JRewardCampaign.remove",
		Method:             "POST",
		PathPattern:        "/remote.api/JRewardCampaign.remove/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JRewardCampaignRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JRewardCampaignRemoveOK), nil

}

/*
JRewardCampaignSome j reward campaign some API
*/
func (a *Client) JRewardCampaignSome(params *JRewardCampaignSomeParams, authInfo runtime.ClientAuthInfoWriter) (*JRewardCampaignSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJRewardCampaignSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JRewardCampaign.some",
		Method:             "POST",
		PathPattern:        "/remote.api/JRewardCampaign.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JRewardCampaignSomeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JRewardCampaignSomeOK), nil

}

/*
JRewardCampaignUpdate j reward campaign update API
*/
func (a *Client) JRewardCampaignUpdate(params *JRewardCampaignUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*JRewardCampaignUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJRewardCampaignUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JRewardCampaign.update",
		Method:             "POST",
		PathPattern:        "/remote.api/JRewardCampaign.update/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JRewardCampaignUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JRewardCampaignUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
