package j_team_invitation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j team invitation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j team invitation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JTeamInvitationByCode Method JTeamInvitation.byCode
*/
func (a *Client) JTeamInvitationByCode(params *JTeamInvitationByCodeParams, authInfo runtime.ClientAuthInfoWriter) (*JTeamInvitationByCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJTeamInvitationByCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JTeamInvitation.byCode",
		Method:             "POST",
		PathPattern:        "/remote.api/JTeamInvitation.byCode",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JTeamInvitationByCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JTeamInvitationByCodeOK), nil

}

/*
JTeamInvitationCreate Method JTeamInvitation.create
*/
func (a *Client) JTeamInvitationCreate(params *JTeamInvitationCreateParams, authInfo runtime.ClientAuthInfoWriter) (*JTeamInvitationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJTeamInvitationCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JTeamInvitation.create",
		Method:             "POST",
		PathPattern:        "/remote.api/JTeamInvitation.create",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JTeamInvitationCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JTeamInvitationCreateOK), nil

}

/*
JTeamInvitationRemove j team invitation remove API
*/
func (a *Client) JTeamInvitationRemove(params *JTeamInvitationRemoveParams, authInfo runtime.ClientAuthInfoWriter) (*JTeamInvitationRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJTeamInvitationRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JTeamInvitation.remove",
		Method:             "POST",
		PathPattern:        "/remote.api/JTeamInvitation.remove/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JTeamInvitationRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JTeamInvitationRemoveOK), nil

}

/*
JTeamInvitationSendInvitationEmails j team invitation send invitation emails API
*/
func (a *Client) JTeamInvitationSendInvitationEmails(params *JTeamInvitationSendInvitationEmailsParams, authInfo runtime.ClientAuthInfoWriter) (*JTeamInvitationSendInvitationEmailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJTeamInvitationSendInvitationEmailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JTeamInvitation.sendInvitationEmails",
		Method:             "POST",
		PathPattern:        "/remote.api/JTeamInvitation.sendInvitationEmails",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JTeamInvitationSendInvitationEmailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JTeamInvitationSendInvitationEmailsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
