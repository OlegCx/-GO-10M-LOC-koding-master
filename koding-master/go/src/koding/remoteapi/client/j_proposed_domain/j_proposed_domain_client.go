package j_proposed_domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j proposed domain API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j proposed domain API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JProposedDomainActivateDomain j proposed domain activate domain API
*/
func (a *Client) JProposedDomainActivateDomain(params *JProposedDomainActivateDomainParams, authInfo runtime.ClientAuthInfoWriter) (*JProposedDomainActivateDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProposedDomainActivateDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProposedDomain.activateDomain",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.activateDomain/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProposedDomainActivateDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProposedDomainActivateDomainOK), nil

}

/*
JProposedDomainBindMachine Method JProposedDomain.bindMachine
*/
func (a *Client) JProposedDomainBindMachine(params *JProposedDomainBindMachineParams, authInfo runtime.ClientAuthInfoWriter) (*JProposedDomainBindMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProposedDomainBindMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProposedDomain.bindMachine",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.bindMachine/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProposedDomainBindMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProposedDomainBindMachineOK), nil

}

/*
JProposedDomainCreateDomain Method JProposedDomain.createDomain
*/
func (a *Client) JProposedDomainCreateDomain(params *JProposedDomainCreateDomainParams, authInfo runtime.ClientAuthInfoWriter) (*JProposedDomainCreateDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProposedDomainCreateDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProposedDomain.createDomain",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.createDomain",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProposedDomainCreateDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProposedDomainCreateDomainOK), nil

}

/*
JProposedDomainDeactivateDomain j proposed domain deactivate domain API
*/
func (a *Client) JProposedDomainDeactivateDomain(params *JProposedDomainDeactivateDomainParams, authInfo runtime.ClientAuthInfoWriter) (*JProposedDomainDeactivateDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProposedDomainDeactivateDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProposedDomain.deactivateDomain",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.deactivateDomain/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProposedDomainDeactivateDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProposedDomainDeactivateDomainOK), nil

}

/*
JProposedDomainFetchDomains j proposed domain fetch domains API
*/
func (a *Client) JProposedDomainFetchDomains(params *JProposedDomainFetchDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*JProposedDomainFetchDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProposedDomainFetchDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProposedDomain.fetchDomains",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.fetchDomains",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProposedDomainFetchDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProposedDomainFetchDomainsOK), nil

}

/*
JProposedDomainOne j proposed domain one API
*/
func (a *Client) JProposedDomainOne(params *JProposedDomainOneParams, authInfo runtime.ClientAuthInfoWriter) (*JProposedDomainOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProposedDomainOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProposedDomain.one",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProposedDomainOneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProposedDomainOneOK), nil

}

/*
JProposedDomainRemove j proposed domain remove API
*/
func (a *Client) JProposedDomainRemove(params *JProposedDomainRemoveParams, authInfo runtime.ClientAuthInfoWriter) (*JProposedDomainRemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProposedDomainRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProposedDomain.remove",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.remove/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProposedDomainRemoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProposedDomainRemoveOK), nil

}

/*
JProposedDomainUnbindMachine Method JProposedDomain.unbindMachine
*/
func (a *Client) JProposedDomainUnbindMachine(params *JProposedDomainUnbindMachineParams, authInfo runtime.ClientAuthInfoWriter) (*JProposedDomainUnbindMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJProposedDomainUnbindMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JProposedDomain.unbindMachine",
		Method:             "POST",
		PathPattern:        "/remote.api/JProposedDomain.unbindMachine/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JProposedDomainUnbindMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JProposedDomainUnbindMachineOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
