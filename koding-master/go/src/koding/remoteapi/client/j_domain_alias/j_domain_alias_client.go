package j_domain_alias

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new j domain alias API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for j domain alias API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JDomainAliasOne j domain alias one API
*/
func (a *Client) JDomainAliasOne(params *JDomainAliasOneParams, authInfo runtime.ClientAuthInfoWriter) (*JDomainAliasOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJDomainAliasOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JDomainAlias.one",
		Method:             "POST",
		PathPattern:        "/remote.api/JDomainAlias.one",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JDomainAliasOneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JDomainAliasOneOK), nil

}

/*
JDomainAliasSome j domain alias some API
*/
func (a *Client) JDomainAliasSome(params *JDomainAliasSomeParams, authInfo runtime.ClientAuthInfoWriter) (*JDomainAliasSomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJDomainAliasSomeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JDomainAlias.some",
		Method:             "POST",
		PathPattern:        "/remote.api/JDomainAlias.some",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JDomainAliasSomeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JDomainAliasSomeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
